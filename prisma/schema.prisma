generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id(map: "pk_user") @default(uuid())
  email    String  @unique @db.VarChar(255)
  password String  @db.VarChar(255)
  name     String? @db.VarChar(50)
  Admin    Admin?
  Player   Player?

  @@index([id], map: "index_user")
}

model Admin {
  id_user         String       @id(map: "pk_admin")
  second_password String       @db.VarChar(255)
  user            User         @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_admin")
  Privilegies     Privilegies?

  @@index([id_user], map: "index_admin")
}

model Player {
  id_user                  String           @id(map: "pk_player")
  complete_game_percentage Int              @default(0)
  user                     User             @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_player")
  Reports                  Reports[]
  PlayerProgress           PlayerProgress[]

  @@index([id_user], map: "index_player")
}

model Privilegies {
  id                      String  @id(map: "pk_privilegies") @default(uuid())
  id_admin                String  @unique
  canCreateAdmin          Boolean @default(false)
  canDeleteAdmin          Boolean @default(false)
  canViewAllAdmin         Boolean @default(false)
  canEditPrivilegiesAdmin Boolean @default(false)
  canManageCRUDPlayer     Boolean @default(false)
  canManageCRUDReports    Boolean @default(true)
  canManageContentGame    Boolean @default(true)
  canReorderContentGame   Boolean @default(true)
  admin                   Admin   @relation(fields: [id_admin], references: [id_user], onDelete: Cascade, onUpdate: Cascade, map: "fk_privilegies_admin")
}

model Reports {
  id        String  @id(map: "pk_report") @default(uuid())
  id_player String
  text      String
  resolved  Boolean @default(false)
  player    Player  @relation(fields: [id_player], references: [id_user], onDelete: Cascade, onUpdate: Cascade, map: "fk_report_player")

  @@index([id], map: "index_reports")
}

model Capter {
  id             String           @id(map: "pk_capter") @default(uuid())
  title          String           @db.VarChar(50)
  numberOrder    Int              @unique @default(autoincrement())
  PlayerProgress PlayerProgress[]
  Exam           Exam?
  Level          Level[]

  @@index([id], map: "index_capter")
}

model Assessement {
  id          String      @id(map: "pk_assessment") @default(uuid())
  title       String      @db.VarChar(50)
  objective   Objective[]
  Exam        Exam[]
  Activity    Activity[]
}

model Exam {
  id_assessment String @id(map: "pk_exam")
  id_capter     String @unique
  description   String

  capter     Capter      @relation(fields: [id_capter], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_exam_capter")
  assessment Assessement @relation(fields: [id_assessment], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_exam_assessment")

  @@index([id_assessment], map: "index_exam")
}

model Activity {
  id_assessment String @id(map: "pk_activity")
  id_orderLevel String

  assessment Assessement @relation(fields: [id_assessment], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_activity_assessment")
  orderLevel OrderLevel  @relation(fields: [id_orderLevel], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_subject_orderLevel")

  @@index([id_assessment], map: "index_activity")
}

model Objective {
  id            String @id(map: "pk_objective") @default(uuid())
  id_assessment String
  resolution    String
  objective     String

  assessement Assessement @relation(fields: [id_assessment], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_objective_assessment")

  @@index([id], map: "index_objective")
}

model Level {
  id          String @id(map: "pk_level") @default(uuid())
  id_capter   String
  title       String @db.VarChar(50)
  numberOrder Int

  capter Capter @relation(fields: [id_capter], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_level_capter")

  CapterProgress CapterProgress[]
  OrderLevel     OrderLevel[]

  @@unique([id_capter, numberOrder])
  @@index([id], map: "index_level")
}

model OrderLevel {
  id       String @id(map: "pk_orderLevel") @default(uuid())
  order    Int
  id_level String

  level Level @relation(fields: [id_level], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_orderLevel_level")

  LevelProgress LevelProgress[]
  Activity      Activity[]
  Subject       Subject[]

  @@unique([id_level, order])
  @@index([id, id_level], map: "index_orderLevel")
}

model Subject {
  id            String @id(map: "pk_subject") @default(uuid())
  id_orderLevel String
  title         String @db.VarChar(50)
  text          String

  orderLevel OrderLevel @relation(fields: [id_orderLevel], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_subject_orderLevel")

  @@index([id], map: "index_subject")
}

model PlayerProgress {
  id            String  @id(map: "pk_playerProgress") @default(uuid())
  id_capter     String
  id_player     String
  completed     Boolean @default(false)
  exam_complete Boolean @default(false)

  capter Capter @relation(fields: [id_capter], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_playerProgress_capter")
  player Player @relation(fields: [id_player], references: [id_user], onDelete: Cascade, onUpdate: Cascade, map: "fk_playerProgress_player")

  CapterProgress CapterProgress[]

  @@index([id], map: "index_playerProgress")
}

model CapterProgress {
  id                 String  @id(map: "pk_capterProgress") @default(uuid())
  id_player_progress String
  id_level           String
  completed          Boolean @default(false)

  player_progress PlayerProgress @relation(fields: [id_player_progress], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_capterProgress_playerProgress")
  level           Level          @relation(fields: [id_level], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_capterProgress_level")

  LevelProgress LevelProgress[]

  @@index([id], map: "index_capterProgress")
}

model LevelProgress {
  id                 String  @id(map: "pk_levelProgress") @default(uuid())
  id_orderLevel      String
  id_capter_progress String
  completed          Boolean @default(false)

  capter_progress CapterProgress @relation(fields: [id_capter_progress], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_levelProgress_capterProgress")
  orderLevel      OrderLevel     @relation(fields: [id_orderLevel], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_subject_orderLevel")

  @@index([id], map: "index_levelProgress")
}
