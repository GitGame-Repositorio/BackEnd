generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id(map: "pk_user") @default(uuid())
  email    String  @db.VarChar(255)
  password String  @db.VarChar(255)
  name     String? @db.VarChar(50)
  Admin    Admin?
  Player   Player?

  @@index([id], map: "index_user")
}

model Admin {
  id_user         String @id(map: "pk_admin")
  second_password String @db.VarChar(255)
  user            User   @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_admin")

  @@index([id_user], map: "index_admin")
}

model Player {
  id_user                  String           @id(map: "pk_player")
  complete_game_percentage Int              @default(0)
  user                     User             @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_player")
  Reports                  Reports[]
  PlayerProgress           PlayerProgress[]

  @@index([id_user], map: "index_player")
}

model Reports {
  id        String  @id(map: "pk_report") @default(uuid())
  id_player String
  texto     String
  resolved  Boolean @default(false)
  player    Player  @relation(fields: [id_player], references: [id_user], onDelete: Cascade, onUpdate: Cascade, map: "fk_report_player")

  @@index([id], map: "index_reports")
}

model Capter {
  id             String           @id(map: "pk_capter") @default(uuid())
  id_assessment  String
  title          String           @db.VarChar(50)
  number         Int
  PlayerProgress PlayerProgress[]
  Assessment     Assessment?
  Level          Level[]

  @@index([id], map: "index_capter")
}

model Assessment {
  id             String           @id(map: "pk_assessment") @default(uuid())
  id_capter      String           @unique
  title          String           @db.VarChar(50)
  description    String
  capter         Capter           @relation(fields: [id_capter], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_assessment_capter")
  objective      objective[]
  CapterProgress CapterProgress[]

  @@index([id], map: "index_assessment")
}

model objective {
  id                     String          @id(map: "pk_objective") @default(uuid())
  id_assessment_activity String
  tipo                   TypeIdObjective
  resolution             String
  objective              String
  assessement            Assessment      @relation(fields: [id_assessment_activity], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_objective_assessment")
  activity               Activity        @relation(fields: [id_assessment_activity], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_objective_activity")
  Subject                Subject?        @relation(fields: [subjectId], references: [id])
  subjectId              String?

  @@index([id], map: "index_objective")
}

model Level {
  id             String           @id(map: "pk_level") @default(uuid())
  id_capter      String
  title          String           @db.VarChar(50)
  number         Int
  capter         Capter           @relation(fields: [id_capter], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_level_capter")
  Activity       Activity[]
  CapterProgress CapterProgress[]
  Subject        Subject[]

  @@index([id], map: "index_level")
}

model Activity {
  id            String          @id(map: "pk_activity") @default(uuid())
  id_level      String
  title         String          @db.VarChar(50)
  level         Level           @relation(fields: [id_level], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_activity_level")
  objective     objective[]
  LevelProgress LevelProgress[]

  @@index([id], map: "index_activity")
}

model Subject {
  id            String          @id(map: "pk_subject") @default(uuid())
  id_level      String
  title         String          @db.VarChar(50)
  text          String
  level         Level           @relation(fields: [id_level], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_subject_level")
  objective     objective[]
  LevelProgress LevelProgress[]

  @@index([id], map: "index_subject")
}

model PlayerProgress {
  id             String           @id(map: "pk_playerProgress") @default(uuid())
  id_capter      String
  id_player      String
  completed      Boolean          @default(false)
  capter         Capter           @relation(fields: [id_capter], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_playerProgress_capter")
  player         Player           @relation(fields: [id_player], references: [id_user], onDelete: Cascade, onUpdate: Cascade, map: "fk_playerProgress_player")
  CapterProgress CapterProgress[]

  @@index([id], map: "index_playerProgress")
}

model CapterProgress {
  id                  String               @id(map: "pk_capterProgress") @default(uuid())
  id_player_progress  String
  id_assessment_level String
  tipo                TypeIdProgressCapter
  completed           Boolean              @default(false)
  player_progress     PlayerProgress       @relation(fields: [id_player_progress], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_capterProgress_playerProgress")
  assessment          Assessment           @relation(fields: [id_assessment_level], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_capterProgress_assessment")
  level               Level                @relation(fields: [id_assessment_level], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_capterProgress_level")
  LevelProgress       LevelProgress[]

  @@index([id], map: "index_capterProgress")
}

model LevelProgress {
  id                  String              @id(map: "pk_levelProgress") @default(uuid())
  id_subject_activity String
  id_capter_progress  String
  tipo                TypeIdProgressLevel
  completed           Boolean             @default(false)
  capter_progress     CapterProgress      @relation(fields: [id_capter_progress], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_levelProgress_capterProgress")
  activity            Activity            @relation(fields: [id_subject_activity], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_levelProgress_activity")
  subject             Subject             @relation(fields: [id_subject_activity], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_levelProgress_subject")

  @@index([id], map: "index_levelProgress")
}

enum TypeIdObjective {
  assessment
  activity
}

enum TypeIdProgressCapter {
  assessment
  level
}

enum TypeIdProgressLevel {
  activity
  subject
}
