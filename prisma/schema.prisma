generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id(map: "pk_user") @default(uuid())
  picture        String           @default("/images/common.png")
  language       String           @default("portuguese")
  apparence      Apparence        @default(LIGHT)
  userLogged     UserLogged?
  reports        Reports[]
  capterProgress CapterProgress[]
  UserWork       UserWork[]

  @@index([id], map: "index_user")
}

model UserLogged {
  id_user  String  @id(map: "pk_userLogeed")
  email    String  @unique @db.VarChar(255)
  password String  @db.VarChar(255)
  name     String? @db.VarChar(50)
  user     User    @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_userLogged")
  admin    Admin?

  @@index([id_user], map: "index_userLogged")
}

model UserWork {
  id_user String
  work    String @db.VarChar(50)
  user    User   @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_userWork")

  @@id([id_user, work])
}

model Admin {
  id_userLogged   String       @id(map: "pk_admin")
  userLogged      UserLogged   @relation(fields: [id_userLogged], references: [id_user], onDelete: Cascade, onUpdate: Cascade, map: "fk_admin")
  privilegies     Privilegies?

  @@index([id_userLogged], map: "index_admin")
}

model Privilegies {
  id                      String  @id(map: "pk_privilegies") @default(uuid())
  id_admin                String  @unique
  canCreateAdmin          Boolean @default(false)
  canDeleteAdmin          Boolean @default(false)
  canViewAllAdmin         Boolean @default(false)
  canEditPrivilegiesAdmin Boolean @default(false)
  canManageCRUDPlayer     Boolean @default(false)
  canManageCRUDReports    Boolean @default(true)
  canManageContentGame    Boolean @default(true)
  canReorderContentGame   Boolean @default(true)
  admin                   Admin   @relation(fields: [id_admin], references: [id_userLogged], onDelete: Cascade, onUpdate: Cascade, map: "fk_privilegies_admin")
}

model Reports {
  id          String       @id(map: "pk_report") @default(uuid())
  id_user     String
  title       String
  description String
  status      ReportStatus @default(OPENED)
  user        User         @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_report_player")

  @@index([id], map: "index_reports")
}

model Capter {
  id             String           @id(map: "pk_capter") @default(uuid())
  title          String           @db.VarChar(50)
  titleGroup     String           @db.VarChar(50)
  numberOrder    Int              @unique @default(autoincrement())
  exam           Exam?
  level          Level[]
  capterProgress CapterProgress[]

  @@index([id], map: "index_capter")
}

model Assessement {
  id        String      @id(map: "pk_assessment") @default(uuid())
  title     String      @db.VarChar(50)
  objective Objective[]
  exam      Exam[]
  activity  Activity[]
}

model Exam {
  id_assessment String @id(map: "pk_exam")
  id_capter     String @unique
  description   String

  capter     Capter      @relation(fields: [id_capter], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_exam_capter")
  assessment Assessement @relation(fields: [id_assessment], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_exam_assessment")

  @@index([id_assessment], map: "index_exam")
}

model Activity {
  id_assessment  String @id(map: "pk_activity")
  id_order_level String

  assessment Assessement @relation(fields: [id_assessment], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_activity_assessment")
  orderLevel OrderLevel  @relation(fields: [id_order_level], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_subject_orderLevel")

  @@index([id_assessment], map: "index_activity")
}

model Objective {
  id            String @id(map: "pk_objective") @default(uuid())
  id_assessment String
  resolution    String
  objective     String

  assessement Assessement @relation(fields: [id_assessment], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_objective_assessment")

  @@index([id], map: "index_objective")
}

model Level {
  id          String @id(map: "pk_level") @default(uuid())
  id_capter   String
  title       String @db.VarChar(50)
  numberOrder Int

  capter Capter @relation(fields: [id_capter], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_level_capter")

  orderLevel    OrderLevel[]
  levelProgress LevelProgress[]

  @@unique([id_capter, numberOrder])
  @@index([id], map: "index_level")
}

model OrderLevel {
  id       String @id(map: "pk_orderLevel") @default(uuid())
  order    Int
  id_level String

  level Level @relation(fields: [id_level], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_orderLevel_level")

  contentProgress ContentProgress[]
  activity        Activity[]
  subject         Subject[]

  @@unique([id_level, order])
  @@index([id, id_level], map: "index_orderLevel")
}

model Subject {
  id             String @id(map: "pk_subject") @default(uuid())
  id_order_level String
  title          String @db.VarChar(50)
  text           String

  orderLevel OrderLevel @relation(fields: [id_order_level], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_subject_orderLevel")

  @@index([id], map: "index_subject")
}

model CapterProgress {
  id            String  @id(map: "pk_capterProgress") @default(uuid())
  id_capter     String
  id_user       String
  exam_complete Boolean @default(false)

  capter        Capter          @relation(fields: [id_capter], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_capterProgress_capter")
  user          User            @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_capterProgress_user")
  levelProgress LevelProgress[]

  @@unique([id_capter, id_user])
  @@index([id], map: "index_capterProgress")
}

model LevelProgress {
  id                 String @id(map: "pk_levelProgress") @default(uuid())
  id_capter_progress String
  id_level           String

  capterProgress  CapterProgress    @relation(fields: [id_capter_progress], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_levelProgress_capterProgress")
  level           Level             @relation(fields: [id_level], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_levelProgress_level")
  contentProgress ContentProgress[]

  @@unique([id_capter_progress, id_level])
  @@index([id], map: "index_levelProgress")
}

model ContentProgress {
  id                String  @id(map: "pk_contentProgress") @default(uuid())
  id_order_level    String
  id_level_progress String
  timeInSeconds     Int     @default(0)
  complete          Boolean @default(false)

  levelProgress LevelProgress @relation(fields: [id_level_progress], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_contentProgress_levelProgress")
  orderLevel    OrderLevel    @relation(fields: [id_order_level], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_contentProgress_orderLevel")

  @@unique([id_order_level, id_level_progress])
  @@index([id], map: "index_contentProgress")
}

enum Apparence {
  LIGHT
  DARK
}

enum ReportStatus {
  OPENED
  CLOSED
  RESOLVED
}
